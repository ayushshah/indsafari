package com.example.pleasework;

import java.io.IOException;
import java.util.List;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.location.Address;
import android.location.Criteria;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMapClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

public class MapActivity extends Activity implements LocationListener,OnMapClickListener {

	boolean isDlgDisplayed = false;
	LatLng currentloc,firstloc,secondloc;
	
	int flag=1;
	
	// Google Map
	private GoogleMap googleMap;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_map);

		
		try {
			// Loading map
			initializeMap();

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	/**
	 * function to load map. If map is not created it will create it for you
	 * */
	private void initializeMap() {
		int status = GooglePlayServicesUtil
				.isGooglePlayServicesAvailable(getBaseContext());

		if (status == ConnectionResult.SUCCESS) {
			if (googleMap == null) {
				googleMap = ((MapFragment) getFragmentManager()
						.findFragmentById(R.id.map)).getMap();

				// Enabling MyLocation Layer of Google Map
				googleMap.setMyLocationEnabled(true);
				googleMap.setOnMapClickListener(this);
				// Getting LocationManager object from System Service
				// LOCATION_SERVICE
				LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);

				// Creating a criteria object to retrieve provider
				Criteria criteria = new Criteria();

				// Getting the name of the best provider
				String provider = locationManager.getBestProvider(criteria, true);

				// Getting Current Location
				Location location = locationManager.getLastKnownLocation(provider);

				if (location != null) {
					onLocationChanged(location);
				}
				locationManager.requestLocationUpdates(provider, 20000, 0, this);
				
				
				// check if map is created successfully or not
				if (googleMap == null) {
					Toast.makeText(getApplicationContext(),
							"Sorry! unable to create maps", Toast.LENGTH_SHORT)
							.show();
				}
			}
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	protected void onResume() {
		super.onResume();
		initializeMap();
	}

	@Override
	public void onLocationChanged(Location location) {
		if(isDlgDisplayed == true)
			return;
		
		// Getting latitude of the current location
		double latitude = location.getLatitude();

		// Getting longitude of the current location
		double longitude = location.getLongitude();

		// Creating a LatLng object for the current location
		LatLng latLng = new LatLng(latitude, longitude);

		// Showing the current location in Google Map
		googleMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));

		// Zoom in the Google Map
		googleMap.animateCamera(CameraUpdateFactory.zoomTo(15));

		Toast.makeText(getApplicationContext(),
				"Latitude:" + latitude + ", Longitude:" + longitude,
				Toast.LENGTH_LONG).show();
	
		
	}

	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onMapClick(LatLng location) {

		currentloc=location;
		googleMap.animateCamera(CameraUpdateFactory.newLatLng(currentloc));
if(flag==1)
{
firstloc=location;
// create marker
MarkerOptions marker1 = new MarkerOptions().position(firstloc).title("First Location ");
marker1.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_ROSE)); 
// adding marker
googleMap.addMarker(marker1);
new ReverseGeocodingTask(getBaseContext()).execute(firstloc);
flag++;
}
else if(flag==2)
{
secondloc=location;
// create marker
MarkerOptions marker2 = new MarkerOptions().position(secondloc).title("Second Location ");
marker2.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_CYAN)); 
// adding marker
googleMap.addMarker(marker2);
new ReverseGeocodingTask(getBaseContext()).execute(secondloc);
Location l1 = new Location("first");
Location l2 = new Location("second");;
l1.setLatitude(firstloc.latitude);
	l1.setLongitude(firstloc.longitude);
	l2.setLatitude(secondloc.latitude);
	l2.setLongitude(secondloc.longitude);
	float dist=l1.distanceTo(l2);
	Toast.makeText(getApplicationContext(), "Distance is "+dist, Toast.LENGTH_LONG).show();
	flag++;
}
else
{
	// Clears the previously touched position
	googleMap.clear();
	flag=1;
}
		
		
		
	}
	
	
	private class ReverseGeocodingTask extends AsyncTask<LatLng, Void, String> {
		Context mContext;

		public ReverseGeocodingTask(Context context) {
			super();
			mContext = context;
		}

		// Finding address using reverse geocoding
		@Override
		protected String doInBackground(LatLng... params) {
			Geocoder geocoder = new Geocoder(mContext);
			double latitude = params[0].latitude;
			double longitude = params[0].longitude;

			List<Address> addresses = null;
			String addressText = "";

			try {
				addresses = geocoder.getFromLocation(latitude, longitude, 1);
			} catch (IOException e) {
				e.printStackTrace();
			}

			if (addresses != null && addresses.size() > 0) {
				Address address = addresses.get(0);

				addressText = String.format(
						"%s, %s, %s",
						address.getMaxAddressLineIndex() > 0 ? address
								.getAddressLine(0) : "", address.getLocality(),
								address.getCountryName());
			}

			return addressText;
		}

		@Override
		protected void onPostExecute(final String addressText) {

			Toast.makeText(getApplicationContext(),
					"Address is  "+addressText, 1000)
					.show();
		
	}
}}




